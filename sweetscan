#!/usr/bin/env python3

import sys
import subprocess
import re
import ipaddress
import argparse

# Set the output file paths
fping_output_file = "fping_output.txt"
fping_alive_file = "fping_alive.txt"
nmap_output_file = "nmap_output.txt"
nmap_header_script_output_file = "nmap_header_script_output_file.txt"
nmap_cipher_script_output_file = "nmap_cipher_script_output_file.txt"
subfinder_output_file = "subfinder_output.txt"
nuclei_output_file = "nuclei_output.txt"
master_scope_file = "master_scope.txt"

# Set the input file paths
ip_list_file_path = 'ip_list.txt'
scope_file_path = 'scope.txt'

# Argument parser setup
parser = argparse.ArgumentParser(description='sweetscan Tool')
parser.add_argument('-a', '--skip-fping', action='store_true', help='Skip fping and use ip_list.txt for remaining tools')
parser.add_argument('-u', '--use-single', type=str, help='Use a single IP or domain for scanning')
parser.add_argument('-i', '--stop-after-ip-list', action='store_true', help='Stop script after creating ip_list.txt')
parser.add_argument('-f', '--stop-after-fping-alive', action='store_true', help='Stop script after creating fping_alive.txt')

args = parser.parse_args()

# Function to resolve domain names to IP addresses
def resolve_domain_to_ip(domain):
    try:
        domain = re.sub(r'\.com/.*', '.com', domain)
        result = subprocess.check_output(['dig', '+short', domain, 'A']).decode('utf-8').strip()
        return result.split('\n')
    except subprocess.CalledProcessError as e:
        print(f"Error running dig for domain {domain}: {e}")
        sys.exit(1)
    except Exception as e:
        print(f"An unexpected error occurred: {e}")
        sys.exit(1)

# Function to expand subnets into individual IP addresses
def expand_subnet(subnet):
    subnet = subnet.replace(" ", "")
    try:
        if not any(protocol in subnet for protocol in ['http://', 'https://']):
            network = ipaddress.IPv4Network(subnet, strict=False)
            return [str(ip) for ip in network.hosts()]
        else:
            return [subnet]
    except ipaddress.AddressValueError as e:
        return [subnet]

# Function to remove leading and trailing whitespaces, including spaces and tabs after the IP address
def remove_whitespace(file_path):
    with open(file_path, 'r') as file:
        lines = [line.strip().replace(' ', '').replace('\t', '') for line in file]
    with open(file_path, 'w') as file:
        file.write('\n'.join(lines))

# Function to remove "http://" and "https://" prefixes from each line in a file, and characters after ".com"
def remove_http_prefix_and_suffix(file_path):
    with open(file_path, 'r') as file:
        lines = [re.sub(r'https?://', '', line.strip()) for line in file]
        lines = [re.sub(r'\.com/.*', '.com', line) for line in lines]
    with open(file_path, 'w') as file:
        file.write('\n'.join(lines))

# Check if -u argument is used
if args.use_single:
    single_ip_or_domain = args.use_single
    if '/' in single_ip_or_domain or any(protocol in single_ip_or_domain for protocol in ['http://', 'https://']):
        ip_list = expand_subnet(single_ip_or_domain) if '/' in single_ip_or_domain else resolve_domain_to_ip(single_ip_or_domain)
    else:
        ip_list = [single_ip_or_domain]

    with open(ip_list_file_path, 'w') as ip_list_file:
        ip_list_file.write('\n'.join(ip_list))
else:
    remove_whitespace(scope_file_path)
    remove_http_prefix_and_suffix(scope_file_path)

    try:
        ip_list = []
        with open(scope_file_path, 'r') as scope_file:
            for line in scope_file:
                line = line.strip()
                if '/' in line:
                    ip_list.extend(expand_subnet(line))
                else:
                    ip_list.extend(resolve_domain_to_ip(line))

        with open(ip_list_file_path, 'w') as ip_list_file:
            ip_list_file.write('\n'.join(ip_list))
    except Exception as e:
        print(f"An unexpected error occurred: {e}")
        sys.exit(1)
if args.stop_after_ip_list:
    print("Script stopped after creating ip_list.txt.")
    sys.exit(0)

if not args.skip_fping:
    try:
        subprocess.run(['fping', '-f', ip_list_file_path], stdout=subprocess.PIPE, stderr=subprocess.PIPE, check=True)
    except subprocess.CalledProcessError as e:
        with open(fping_output_file, 'w') as fping_output:
            fping_output.write(f"Error running fping: {e.output.decode()}\n")

    try:
        with open(fping_output_file, 'r') as fping_output:
            fping_output_content = fping_output.read()
            match = re.findall(r'\b(?:\d{1,3}\.){3}\d{1,3}\s*is alive\b', fping_output_content)
            alive_ips = [ip.replace(' is alive', '') for ip in match]
    except FileNotFoundError:
        alive_ips = []

    with open(fping_alive_file, 'w') as fping_alive:
        for ip in alive_ips:
            fping_alive.write(f"{ip}\n")
if args.stop_after_fping_alive:
    print("Script stopped after creating fping_alive.txt.")
    sys.exit(0)

try:
    input_file_for_subfinder = ip_list_file_path if args.use_single else scope_file_path
    subprocess.run(['subfinder', '-dL', input_file_for_subfinder, '-silent', '-o', subfinder_output_file], check=True)
except subprocess.CalledProcessError as e:
    print(f"Error running Subfinder: {e}")
    sys.exit(1)

scope_domains = set()
try:
    with open(scope_file_path, 'r') as scope_file:
        for line in scope_file:
            line = line.strip()
            if '/' in line:
                expanded_ips = expand_subnet(line)
                scope_domains.update(expanded_ips)
            else:
                scope_domains.add(line)
except Exception as e:
    print(f"An unexpected error occurred while reading scope.txt: {e}")
    sys.exit(1)

subfinder_domains = set()
try:
    with open(subfinder_output_file, 'r') as subfinder_output:
        for line in subfinder_output:
            line = line.strip()
            if line.startswith("www."):
                line = line[4:]  # Remove "www."
            subfinder_domains.add(line)
except Exception as e:
    print(f"An unexpected error occurred while reading subfinder output: {e}")
    sys.exit(1)

combined_domains = scope_domains.union(subfinder_domains)

with open(master_scope_file, 'w') as output_file:
    for domain in combined_domains:
        output_file.write(domain + '\n')

# Nmap scanning
try:
    if args.skip_fping or args.use_single:
        input_file = ip_list_file_path
    else:
        input_file = fping_alive_file

    subprocess.run(['sudo', 'nmap', '-oN', nmap_output_file, '-p', '1-1000', '-sV', '-O', '-Pn', '-iL', input_file], check=True)
    subprocess.run(['sudo', 'nmap', '-oN', nmap_header_script_output_file, '-p', '443', '--script', 'http-security-headers', '-iL', input_file], check=True)
    subprocess.run(['sudo', 'nmap', '-oN', nmap_cipher_script_output_file, '-p', '443', '--script', 'ssl-enum-ciphers', '-iL', input_file], check=True)
except subprocess.CalledProcessError as e:
    print(f"Error running Nmap: {e}")
    sys.exit(1)

# Nuclei scanning
try:
    input_file_for_nuclei = master_scope_file if not args.skip_fping else ip_list_file_path
    subprocess.run(['nuclei', '-l', input_file_for_nuclei, '-t', 'nuclei-templates/', '-o', nuclei_output_file], check=True)
except subprocess.CalledProcessError as e:
    print(f"Error running Nuclei: {e}")
    sys.exit(1)

print("Script has finished.")


# Print logo
print("""
Compliments of:

 █████  █████ ████  ██████████ █████                          █████    █████               
░░███  ░░███ ░░███ ░███░░░░███░░███                          ░░███    ░░███                
 ░███   ░███  ░███ ░░░    ███  ░███         ██████   ██████  ███████   ░███████    ██████  
 ░███   ░███  ░███       ███   ░███        ███░░███ ███░░███░░░███░    ░███░░███  ░░░░░███ 
 ░███   ░███  ░███      ███    ░███       ░███████ ░███████   ░███     ░███ ░███   ███████ 
 ░███   ░███  ░███     ███     ░███      █░███░░░  ░███░░░    ░███ ███ ░███ ░███  ███░░███ 
 ░░████████   █████   ███      ███████████░░██████ ░░██████   ░░█████  ████ █████░░████████
  ░░░░░░░░   ░░░░░   ░░░      ░░░░░░░░░░░  ░░░░░░   ░░░░░░     ░░░░░  ░░░░ ░░░░░  ░░░░░░░░ 
                                                                                           
                                                                                           
                                                                                              
                                                        
                                                        
""")
